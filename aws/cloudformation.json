{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "ProjectName": {
      "Type": "String",
      "Default": "Mesos"
    },
    "EcsInstanceCount": {
      "Type": "Number",
      "Default": "5"
    },
    "KeyPairName": {
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "VPCZoneIdentifier": {
      "Type": "AWS::EC2::VPC::Id"
    },
    "SubnetList": {
      "Type": "List<AWS::EC2::Subnet::Id>"
    }
  },
  "Mappings": {
    "instanceTypes": {
      "ecs": {
        "InstanceType": "t2.medium"
      }
    },
    "InstanceRootBlockDevice": {
      "ecs": {
        "DeviceName": "/dev/xvda",
        "VolumeType": "gp2",
        "VolumeSize": "30"
      }
    },
    "AMIs": {
      "eu-west-1": {
        "EcsLinux": "ami-6b12271c"
      }
    },
    "IPs": {
      "DirectConnect": {
        "UK": "10.0.0.0/8"
      }
    }
  },
  "Resources": {
    "EcsCluster": {
      "Type": "AWS::ECS::Cluster"
    },
    "EcsSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable all",
        "VpcId": {
          "Ref": "VPCZoneIdentifier"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Fn::FindInMap": [
                "IPs",
                "DirectConnect",
                "UK"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": {
              "Fn::FindInMap": [
                "IPs",
                "DirectConnect",
                "UK"
              ]
            }
          }
        ],
        "SecurityGroupEgress": [],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "EcsSecurityGroup"
                ]
              ]
            }
          },
          {
            "Key": "Project",
            "Value": {
              "Ref": "ProjectName"
            }
          }
        ]
      }
    },
    "EcsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "sts_decode_message",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "Stmt1443717917000",
                  "Effect": "Allow",
                  "Action": [
                    "sts:DecodeAuthorizationMessage"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "ecs_register_containers",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:SubmitContainerStateChange",
                    "ecs:SubmitTaskStateChange",
                    "ecs:StartTelemetrySession",
                    "ecs:CreateCluster"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "ec2_start_terminate",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "ec2:StopInstances",
                    "ec2:TerminateInstances",
                    "ec2:StartInstances"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "ec2:ResourceTag/Project": {
                        "Ref": "ProjectName"
                      }
                    }
                  }
                },
                {
                  "Action": [
                    "ec2:MonitorInstances",
                    "ec2:UnMonitorInstances",
                    "ec2:RunInstances",
                    "ec2:CreateTags",
                    "ec2:Describe*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "iam_pass_role",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:ListRoles",
                    "iam:ListInstanceProfiles"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:iam::",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":role/*Messos*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "cloudwatch_put_metric_alarm",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "Stmt1441123794000",
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricAlarm",
                    "cloudwatch:DescribeAlarms",
                    "cloudwatch:DescribeAlarmsForMetric",
                    "cloudwatch:DescribeAlarmHistory",
                    "cloudwatch:DescribeAlarms",
                    "cloudwatch:DescribeAlarmsForMetric",
                    "cloudwatch:DisableAlarmActions"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "cloudformation_describe",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:DescribeStackResource",
                    "cloudformation:DescribeStackResources"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "EcsInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "DependsOn": "EcsRole",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "EcsRole"
          }
        ]
      }
    },
    "EcsScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": {
            "Ref": "AWS::Region"
          }
        },
        "VPCZoneIdentifier": {
          "Ref": "SubnetList"
        },
        "LaunchConfigurationName": {
          "Ref": "EcsLaunchConfiguration"
        },
        "MinSize": 0,
        "MaxSize": 10,
        "DesiredCapacity": {
          "Ref": "EcsInstanceCount"
        },
        "HealthCheckType": "EC2",
        "HealthCheckGracePeriod": 300,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "EcsScalingGroup"
                ]
              ]
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Project",
            "Value": {
              "Ref": "ProjectName"
            },
            "PropagateAtLaunch": true
          }
        ]
      }
    },
    "EcsLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn": "EcsSecurityGroup",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "InstallAndRun": [
              "Install",
              "Configure"
            ]
          },
          "Install": {
            "packages": {
              "rpm": {
                "mesosphere": "http://repos.mesosphere.io/el/6/noarch/RPMS/mesosphere-el-repo-6-2.noarch.rpm"
              },
              "yum": {
                "htop": [],
                "aws-cli": [],
                "java-1.8.0-openjdk": [],
                "wget": []
              }
            },
            "commands": {
              "zookeeper-1": {
                "command": "/usr/bin/docker rm -f zk",
                "ignoreErrors": "true"
              },
              "zookeeper-2": {
                "command": "/usr/bin/docker run -d --privileged --net=host --restart always -p 3888:3888 -p 2888:2888 -p 2181:2181 --name=zk ogavrisevs/zookeeper-aws:latest",
                "ignoreErrors": "true"
              }
            }
          },
          "Configure": {
            "services": {
              "sysvinit": {
                "docker": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/sysconfig/docker"
                  ]
                }
              }
            },
            "files": {
              "/etc/ecs/ecs.config": {
                "content": {
                  "Fn::Join": [
                    "=",
                    [
                      "ECS_CLUSTER",
                      {
                        "Ref": "EcsCluster"
                      }
                    ]
                  ]
                },
                "mode": "000600",
                "owner": "root",
                "group": "root"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AMIs",
            {
              "Ref": "AWS::Region"
            },
            "EcsLinux"
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "EcsSecurityGroup"
          }
        ],
        "InstanceType": {
          "Fn::FindInMap": [
            "instanceTypes",
            "ecs",
            "InstanceType"
          ]
        },
        "IamInstanceProfile": {
          "Ref": "EcsInstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": {
              "Fn::FindInMap": [
                "InstanceRootBlockDevice",
                "ecs",
                "DeviceName"
              ]
            },
            "Ebs": {
              "VolumeType": {
                "Fn::FindInMap": [
                  "InstanceRootBlockDevice",
                  "ecs",
                  "VolumeType"
                ]
              },
              "VolumeSize": {
                "Fn::FindInMap": [
                  "InstanceRootBlockDevice",
                  "ecs",
                  "VolumeSize"
                ]
              }
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "yum install -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource EcsLaunchConfiguration ",
                "         --configsets InstallAndRun ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    }
  }
}
